.. java:import:: ca.nengo.util VectorGenerator

Rectifier
=========

.. java:package:: ca.nengo.util.impl
   :noindex:

.. java:type:: public class Rectifier implements VectorGenerator, java.io.Serializable

   Wraps an underlying VectorGenerator, rectifying generated vectors before they are returned.

   :author: Bryan Tripp

Constructors
------------
Rectifier
^^^^^^^^^

.. java:constructor:: public Rectifier(VectorGenerator vg)
   :outertype: Rectifier

   :param vg: A VectorGenerator to underlie this one (ie to produce non-rectified vectors)

Rectifier
^^^^^^^^^

.. java:constructor:: public Rectifier(VectorGenerator vg, boolean positive)
   :outertype: Rectifier

   :param vg: A VectorGenerator to underlie this one (ie to produce non-rectified vectors)
   :param positive: True: vectors are rectified; false: vectors are anti-rectified

Methods
-------
genVectors
^^^^^^^^^^

.. java:method:: public float[][] genVectors(int number, int dimension)
   :outertype: Rectifier

   :return: Rectified version of vector generated by underlying VectorGenerator (all components -> abs value)

   **See also:** :java:ref:`ca.nengo.util.VectorGenerator.genVectors(int,int)`

getPositive
^^^^^^^^^^^

.. java:method:: public boolean getPositive()
   :outertype: Rectifier

   :return: True if values are rectified to be >= 0; false if rectified to <= 0

getRectified
^^^^^^^^^^^^

.. java:method:: public VectorGenerator getRectified()
   :outertype: Rectifier

   :return: Underlying vector generator (output of which is rectified)

setPositive
^^^^^^^^^^^

.. java:method:: public void setPositive(boolean positive)
   :outertype: Rectifier

   :param positive: True if values are rectified to be >= 0; false if rectified to <= 0

setRectified
^^^^^^^^^^^^

.. java:method:: public void setRectified(VectorGenerator vg)
   :outertype: Rectifier

   :param vg: New underlying vector generator (output of which is to be rectified)

